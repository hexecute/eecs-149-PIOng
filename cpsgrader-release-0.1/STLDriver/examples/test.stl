# signals measured by CyberSim
signal x,y,z,pitch,roll,yaw,dist,angle,ax,ay,az,bump_l,bump_r,drop_l,drop_r,drop_f,cliff_l,cliff_fl,cliff_fr,cliff_r,lws,rws,state

### Avoid left
avoid_left_region := y[t] < 3.5 or (x[t] - 4) > 0
goal_left_short := alw_[0, 30.] avoid_left_region 
goal_left_long := alw_[0, 50.] avoid_left_region 

### Avoid right
avoid_right_region := y[t] < 3.5 or x[t] < 6
goal_right_short := alw_[0, 30.] avoid_right_region 
goal_right_long := alw_[0, 50.] avoid_right_region 


## Circle 
reorient_left := (abs(lws[t] + rws[t]) < 1) and (rws[t] > 1) 
reorient_right := (abs(lws[t] + rws[t]) <1) and (lws[t] > 1) 
reorient := (reorient_left) or (reorient_right) 
yaw0 := abs(yaw[t])< 5 
circle := (yaw0) and (reorient until_[1, 50] (yaw0))
fault_circle := ev_[0, 10.] (circle)

### trace tests

test obstacle_left: "Environment - short obstacle left.xml", 30.1, true
{
	test_goal 
    {goal_left_short,
     "REQ FAILED: Couldn't avoid obstacle on the left",
     "REQ PASSED: Avoided obstacle on the left",
     false
    }

	test_circle 
	{fault_circle,
   	"SCENARIO DETECTED: Circles in-place                          POSSIBLE CAUSE: Use of strict equality (or very low tolerance) in re-orientation check",
	"",
	true
	}
}

#test obstacle_right: "Environment - short obstacle right.xml", 30.1, true
#{
#	test_goal 
#	test_circle 
#}
